// Generated by gencpp from file detection/Vide.msg
// DO NOT EDIT!


#ifndef DETECTION_MESSAGE_VIDE_H
#define DETECTION_MESSAGE_VIDE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace detection
{
template <class ContainerAllocator>
struct Vide_
{
  typedef Vide_<ContainerAllocator> Type;

  Vide_()
    : detected(0)  {
    }
  Vide_(const ContainerAllocator& _alloc)
    : detected(0)  {
  (void)_alloc;
    }



   typedef int64_t _detected_type;
  _detected_type detected;





  typedef boost::shared_ptr< ::detection::Vide_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detection::Vide_<ContainerAllocator> const> ConstPtr;

}; // struct Vide_

typedef ::detection::Vide_<std::allocator<void> > Vide;

typedef boost::shared_ptr< ::detection::Vide > VidePtr;
typedef boost::shared_ptr< ::detection::Vide const> VideConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detection::Vide_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detection::Vide_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detection::Vide_<ContainerAllocator1> & lhs, const ::detection::Vide_<ContainerAllocator2> & rhs)
{
  return lhs.detected == rhs.detected;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detection::Vide_<ContainerAllocator1> & lhs, const ::detection::Vide_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::detection::Vide_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection::Vide_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection::Vide_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection::Vide_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection::Vide_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection::Vide_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detection::Vide_<ContainerAllocator> >
{
  static const char* value()
  {
    return "23f88efd171b2e5dc0ad9793b17bca9d";
  }

  static const char* value(const ::detection::Vide_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x23f88efd171b2e5dULL;
  static const uint64_t static_value2 = 0xc0ad9793b17bca9dULL;
};

template<class ContainerAllocator>
struct DataType< ::detection::Vide_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detection/Vide";
  }

  static const char* value(const ::detection::Vide_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detection::Vide_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 detected\n"
;
  }

  static const char* value(const ::detection::Vide_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detection::Vide_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detected);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vide_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detection::Vide_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detection::Vide_<ContainerAllocator>& v)
  {
    s << indent << "detected: ";
    Printer<int64_t>::stream(s, indent + "  ", v.detected);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECTION_MESSAGE_VIDE_H
